

/*****************************************************************************************
  #Design and development factory of recycling management through the internet of thing

  #ComputerEngineering Faculty OF Engineering NakhonPhanomUniversity 
  
  #Pupan Phonkaew 593030710044
 *****************************************************************************************/
#include <Arduino.h>
#include <SoftwareSerial.h>
#include <IotWebConf.h>
#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
#include <BlynkSimpleEsp8266.h>

#define CONFIG_VERSION "dem1"
// -- When CONFIG_PIN is pulled to ground on startup, the Thing will use the initial
//      password to buld an AP. (E.g. in case of lost password)
//#define CONFIG_PIN D2
// -- Status indicator pin.
//      First it will light up (kept LOW), on Wifi connection it will blink,
//      when connected to the Wifi it will turn off (kept HIGH).
//#define STATUS_PIN LED_BUILTIN
const char thingName[] = "scale";
const char wifiInitialApPassword[] = "12345678";

DNSServer dnsServer;
WebServer server(80);
HTTPUpdateServer httpUpdater;
String enrollID;
IotWebConf iotWebConf(thingName, &dnsServer, &server, wifiInitialApPassword, CONFIG_VERSION);
SoftwareSerial swSer(D1, D2);
String rs232input1;
String Website, data, Javascript,XML;
BlynkTimer timer;

int RGBPin[] = {D5, D4, D3};

void SetRGB(int r, int g, int b)
{
  analogWrite(RGBPin[0], r);
  analogWrite(RGBPin[1], g);
  analogWrite(RGBPin[2], b);
}

void setWifiConnectionTimeoutMs()
{
  if (WiFi.status() != WL_CONNECTED)
  {

    Serial.println("Wifi Disconnect");
    SetRGB(255, 0, 0); // Red
  }
  else
  {
    Serial.println("WifiConnected");
    SetRGB(0, 255, 255); // Green
  }
}
void XMLcontent()
{

  XML = "<?xml version='1.0'?>";
  XML += "<data>";
  XML += data;
  XML += "</data>";

  server.send(200, "text/xml", XML);
}
void javascriptContent()
{
  Javascript = "<SCRIPT>\n";
  Javascript += "var xmlHttp=createXmlHttpObject();\n";
  Javascript += "function createXmlHttpObject(){\n";
  Javascript += "if(window.XMLHttpRequest){\n";
  Javascript += "xmlHttp=new XMLHttpRequest();\n";
  Javascript += "}else{\n";
  Javascript += "xmlHttp=new ActiveXObject('Microsoft.XMLHTTP');\n";
  Javascript += "}\n";
  Javascript += "return xmlHttp;\n";
  Javascript += "}\n";
  Javascript += "\n";
  Javascript += "function response(){\n";
  Javascript += "xmlResponse=xmlHttp.responseXML;\n";
  Javascript += "xmldoc = xmlResponse.getElementsByTagName('data');\n";
  Javascript += "message = xmldoc[0].firstChild.nodeValue;\n";
  Javascript += "document.getElementById('div1').innerHTML=message;\n";
  Javascript += "}\n";
  Javascript += "function process(){\n";
  Javascript += "xmlHttp.open('PUT','xml',true);\n";
  Javascript += "xmlHttp.onreadystatechange=response;\n";
  Javascript += "xmlHttp.send(null);\n";
  Javascript += "setTimeout('process()',200);\n";
  Javascript += "}\n";
  server.send(200, "text/html", data);
  Javascript += "</SCRIPT>\n";
}

void handle_NotFound()
{
  server.send(404, "text/plain", "404 Not found.");
}
void WebsiteContent()
{
  if (data == "")
  {
    Serial.println("Unable to contact the scale");
    SetRGB(255, 0, 0);
    data = "Unable to contact the scale";
  }
  else
  {
    SetRGB(0, 255, 0);
  }

  server.sendHeader("access-control-allow-origin", "*");
  server.send(200, "text/html", data);
}
void handleRoot2()
{
  // -- Let IotWebConf test and handle captive portal requests.
  if (iotWebConf.handleCaptivePortal())
  {
    // -- Captive portal request were already served.
    return;
  }
  String s = "<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"/>";
  s += "<title>IotWebConf 04 Update Server</title></head><body>Hello world!";
  s += "Go to <a href='config'>configure page</a> to change values.";
  s += "</body></html>\n";

  server.send(200, "text/html", s);
}

void setup()
{
  Serial.begin(115200);
  swSer.begin(9600);
  pinMode(RGBPin[0], OUTPUT);
  pinMode(RGBPin[1], OUTPUT);
  pinMode(RGBPin[2], OUTPUT);

  timer.setInterval(300L, setWifiConnectionTimeoutMs);
  // iotWebConf.setStatusPin(STATUS_PIN);
  // iotWebConf.setConfigPin(CONFIG_PIN);
  iotWebConf.setupUpdateServer(&httpUpdater);
  iotWebConf.getApTimeoutParameter()->visible = true;
  // iotWebConf.setWifiConnectionTimeoutMs(&httpUpdater);
  // -- Initializing the configuration.
  iotWebConf.init();
  //timer.setInterval(300L, WebsiteContent);
  Serial.println("\nSoftware serial test started");
  server.on("/getscale", WebsiteContent);
  // server.on("/", );
  server.on("/config", [] { iotWebConf.handleConfig(); });
  server.on("/xml", XMLcontent);
  server.onNotFound(handle_NotFound);
  Serial.println("HTTP server started");

  for (char ch = ' '; ch <= 'z'; ch++)
  { //send serially a to z on so ftware serial
    swSer.write(ch);
  }
  swSer.println("");
}

void loop()
{
  iotWebConf.doLoop();
  server.handleClient();
  timer.run();
  data = "";
  timer.run();
  if (swSer.available() > 0)
  {
    rs232input1 = swSer.readStringUntil('\n');
    //Serial.println(rs232input1);
    int strindex = rs232input1.indexOf('=');
    int endindex = rs232input1.indexOf('(');
    rs232input1 = rs232input1.substring(strindex + 1, endindex);
    DynamicJsonDocument root(100);
    root["scale"] = String(rs232input1);
    serializeJson(root, data);
    Serial.println(data);
  }

  // Serial.println(JsonDatascale);

}
